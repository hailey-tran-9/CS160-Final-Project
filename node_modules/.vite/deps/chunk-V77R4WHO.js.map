{
  "version": 3,
  "sources": ["../../maath/dist/isNativeReflectConstruct-5594d075.esm.js", "../../maath/dist/matrix-baa530bf.esm.js", "../../maath/dist/triangle-b62b9067.esm.js", "../../maath/dist/misc-7d870b3c.esm.js", "../../maath/dist/easing-3be59c6d.esm.js"],
  "sourcesContent": ["function _setPrototypeOf(o, p) {\r\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\r\n    o.__proto__ = p;\r\n    return o;\r\n  };\r\n\r\n  return _setPrototypeOf(o, p);\r\n}\r\n\r\nfunction _isNativeReflectConstruct() {\r\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\r\n  if (Reflect.construct.sham) return false;\r\n  if (typeof Proxy === \"function\") return true;\r\n\r\n  try {\r\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport { _setPrototypeOf as _, _isNativeReflectConstruct as a };\r\n", "import { Matrix3 } from 'three';\r\n\r\n/**\r\n *\r\n * @param terms\r\n *\r\n * | a b |\r\n * | c d |\r\n *\r\n * @returns {number} determinant\r\n */\r\n\r\nfunction determinant2() {\r\n  for (var _len = arguments.length, terms = new Array(_len), _key = 0; _key < _len; _key++) {\r\n    terms[_key] = arguments[_key];\r\n  }\r\n\r\n  var a = terms[0],\r\n      b = terms[1],\r\n      c = terms[2],\r\n      d = terms[3];\r\n  return a * d - b * c;\r\n}\r\n/**\r\n *\r\n * @param terms\r\n *\r\n * | a b c |\r\n * | d e f |\r\n * | g h i |\r\n *\r\n * @returns {number} determinant\r\n */\r\n\r\nfunction determinant3() {\r\n  for (var _len2 = arguments.length, terms = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n    terms[_key2] = arguments[_key2];\r\n  }\r\n\r\n  var a = terms[0],\r\n      b = terms[1],\r\n      c = terms[2],\r\n      d = terms[3],\r\n      e = terms[4],\r\n      f = terms[5],\r\n      g = terms[6],\r\n      h = terms[7],\r\n      i = terms[8];\r\n  return a * e * i + b * f * g + c * d * h - c * e * g - b * d * i - a * f * h;\r\n}\r\n/**\r\n *\r\n * @param terms\r\n *\r\n * | a b c g |\r\n * | h i j k |\r\n * | l m n o |\r\n *\r\n * @returns {number} determinant\r\n */\r\n\r\nfunction determinant4() {\r\n  for (var _len3 = arguments.length, terms = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\r\n    terms[_key3] = arguments[_key3];\r\n  }\r\n\r\n  terms[0];\r\n      terms[1];\r\n      terms[2];\r\n      terms[3];\r\n      terms[4];\r\n      terms[5];\r\n      terms[6];\r\n      terms[7];\r\n      terms[8];\r\n      terms[9];\r\n      terms[10];\r\n      terms[11];\r\n      terms[12];\r\n      terms[13];\r\n      terms[14]; // TODO\r\n}\r\n/**\r\n *\r\n * Get the determinant of matrix m without row r and col c\r\n *\r\n * @param {matrix} m Starter matrix\r\n * @param r row to remove\r\n * @param c col to remove\r\n *\r\n *     | a b c |\r\n * m = | d e f |\r\n *     | g h i |\r\n *\r\n * getMinor(m, 1, 1) would result in this determinant\r\n *\r\n * | a c |\r\n * | g i |\r\n *\r\n * @returns {number} determinant\r\n */\r\n\r\nfunction getMinor(matrix, r, c) {\r\n  var _matrixTranspose = matrix.clone().transpose();\r\n\r\n  var x = [];\r\n  var l = _matrixTranspose.elements.length;\r\n  var n = Math.sqrt(l);\r\n\r\n  for (var i = 0; i < l; i++) {\r\n    var element = _matrixTranspose.elements[i];\r\n    var row = Math.floor(i / n);\r\n    var col = i % n;\r\n\r\n    if (row !== r - 1 && col !== c - 1) {\r\n      x.push(element);\r\n    }\r\n  }\r\n\r\n  return determinant3.apply(void 0, x);\r\n}\r\n/**\r\n *\r\n */\r\n\r\nfunction matrixSum3(m1, m2) {\r\n  var sum = [];\r\n  var m1Array = m1.toArray();\r\n  var m2Array = m2.toArray();\r\n\r\n  for (var i = 0; i < m1Array.length; i++) {\r\n    sum[i] = m1Array[i] + m2Array[i];\r\n  }\r\n\r\n  return new Matrix3().fromArray(sum);\r\n}\r\n\r\nvar matrix = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  determinant2: determinant2,\r\n  determinant3: determinant3,\r\n  determinant4: determinant4,\r\n  getMinor: getMinor,\r\n  matrixSum3: matrixSum3\r\n});\r\n\r\nexport { matrixSum3 as a, determinant2 as b, determinant4 as c, determinant3 as d, getMinor as g, matrix as m };\r\n", "import { a as _isNativeReflectConstruct, _ as _setPrototypeOf } from './isNativeReflectConstruct-5594d075.esm.js';\r\nimport { Vector2, Matrix4 } from 'three';\r\nimport { d as determinant3, g as getMinor } from './matrix-baa530bf.esm.js';\r\n\r\nfunction _arrayWithHoles(arr) {\r\n  if (Array.isArray(arr)) return arr;\r\n}\r\n\r\nfunction _iterableToArrayLimit(arr, i) {\r\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\r\n\r\n  if (_i == null) return;\r\n  var _arr = [];\r\n  var _n = true;\r\n  var _d = false;\r\n\r\n  var _s, _e;\r\n\r\n  try {\r\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\r\n      _arr.push(_s.value);\r\n\r\n      if (i && _arr.length === i) break;\r\n    }\r\n  } catch (err) {\r\n    _d = true;\r\n    _e = err;\r\n  } finally {\r\n    try {\r\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\r\n    } finally {\r\n      if (_d) throw _e;\r\n    }\r\n  }\r\n\r\n  return _arr;\r\n}\r\n\r\nfunction _arrayLikeToArray(arr, len) {\r\n  if (len == null || len > arr.length) len = arr.length;\r\n\r\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\r\n\r\n  return arr2;\r\n}\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) {\r\n  if (!o) return;\r\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\r\n  var n = Object.prototype.toString.call(o).slice(8, -1);\r\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\r\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\r\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\r\n}\r\n\r\nfunction _nonIterableRest() {\r\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n}\r\n\r\nfunction _slicedToArray(arr, i) {\r\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\r\n}\r\n\r\nfunction _arrayWithoutHoles(arr) {\r\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\r\n}\r\n\r\nfunction _iterableToArray(iter) {\r\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\r\n}\r\n\r\nfunction _nonIterableSpread() {\r\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n}\r\n\r\nfunction _toConsumableArray(arr) {\r\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\r\n}\r\n\r\nfunction _construct(Parent, args, Class) {\r\n  if (_isNativeReflectConstruct()) {\r\n    _construct = Reflect.construct;\r\n  } else {\r\n    _construct = function _construct(Parent, args, Class) {\r\n      var a = [null];\r\n      a.push.apply(a, args);\r\n      var Constructor = Function.bind.apply(Parent, a);\r\n      var instance = new Constructor();\r\n      if (Class) _setPrototypeOf(instance, Class.prototype);\r\n      return instance;\r\n    };\r\n  }\r\n\r\n  return _construct.apply(null, arguments);\r\n}\r\n\r\n/**\r\n *\r\n * @param point\r\n *\r\n * @param triangle\r\n *\r\n * @returns {boolean} true if the point is in the triangle\r\n *\r\n * TODO: Find explainer\r\n */\r\nfunction isPointInTriangle(point, triangle) {\r\n  var _triangle$ = _slicedToArray(triangle[0], 2),\r\n      ax = _triangle$[0],\r\n      ay = _triangle$[1];\r\n\r\n  var _triangle$2 = _slicedToArray(triangle[1], 2),\r\n      bx = _triangle$2[0],\r\n      by = _triangle$2[1];\r\n\r\n  var _triangle$3 = _slicedToArray(triangle[2], 2),\r\n      cx = _triangle$3[0],\r\n      cy = _triangle$3[1];\r\n\r\n  var _point = _slicedToArray(point, 2),\r\n      px = _point[0],\r\n      py = _point[1]; // TODO Sub with static calc\r\n\r\n\r\n  var matrix = new Matrix4(); // prettier-ignore\r\n\r\n  matrix.set(ax, ay, ax * ax + ay * ay, 1, bx, by, bx * bx + by * by, 1, cx, cy, cx * cx + cy * cy, 1, px, py, px * px + py * py, 1);\r\n  return matrix.determinant() <= 0;\r\n}\r\nfunction triangleDeterminant(triangle) {\r\n  var _triangle$4 = _slicedToArray(triangle[0], 2),\r\n      x1 = _triangle$4[0],\r\n      y1 = _triangle$4[1];\r\n\r\n  var _triangle$5 = _slicedToArray(triangle[1], 2),\r\n      x2 = _triangle$5[0],\r\n      y2 = _triangle$5[1];\r\n\r\n  var _triangle$6 = _slicedToArray(triangle[2], 2),\r\n      x3 = _triangle$6[0],\r\n      y3 = _triangle$6[1]; // prettier-ignore\r\n\r\n\r\n  return determinant3(x1, y1, 1, x2, y2, 1, x3, y3, 1);\r\n}\r\n/**\r\n * Uses triangle area determinant to check if 3 points are collinear.\r\n * If they are, they can't make a triangle, so the determinant will be 0!\r\n *\r\n *      0     1     2\r\n * ─────■─────■─────■\r\n *\r\n *\r\n * Fun fact, you can use this same determinant to check the order of the points in the triangle\r\n *\r\n * NOTE: Should this use a buffer instead? NOTE: Should this use a buffer instead? [x0, y0, x1, y1, x2, y2]?\r\n *\r\n */\r\n\r\nfunction arePointsCollinear(points) {\r\n  return triangleDeterminant(points) === 0;\r\n} // TODO This is the same principle as the prev function, find a way to make it have sense\r\n\r\nfunction isTriangleClockwise(triangle) {\r\n  return triangleDeterminant(triangle) < 0;\r\n}\r\n/**\r\n \r\nThe circumcircle is a circle touching all the vertices of a triangle or polygon.\r\n\r\n             ┌───┐             \r\n             │ B │             \r\n             └───┘             \r\n           .───●───.           \r\n        ,─'   ╱ ╲   '─.        \r\n      ,'     ╱   ╲     `.      \r\n     ╱      ╱     ╲      ╲     \r\n    ;      ╱       ╲      :    \r\n    │     ╱         ╲     │    \r\n    │    ╱           ╲    │    \r\n    :   ╱             ╲   ;    \r\n     ╲ ╱               ╲ ╱     \r\n┌───┐ ●─────────────────● ┌───┐\r\n│ A │  `.             ,'  │ C │\r\n└───┘    '─.       ,─'    └───┘\r\n            `─────'                         \r\n */\r\n\r\n/**\r\n *\r\n * @param triangle\r\n *\r\n * @returns {number} circumcircle\r\n */\r\n// https://math.stackexchange.com/a/1460096\r\n\r\nfunction getCircumcircle(triangle) {\r\n  // TS-TODO the next few lines are ignored because the types aren't current to the change in vectors (that can now be iterated)\r\n  // @ts-ignore\r\n  var _triangle$7 = _slicedToArray(triangle[0], 2),\r\n      ax = _triangle$7[0],\r\n      ay = _triangle$7[1]; // @ts-ignore\r\n\r\n\r\n  var _triangle$8 = _slicedToArray(triangle[1], 2),\r\n      bx = _triangle$8[0],\r\n      by = _triangle$8[1]; // @ts-ignore\r\n\r\n\r\n  var _triangle$9 = _slicedToArray(triangle[2], 2),\r\n      cx = _triangle$9[0],\r\n      cy = _triangle$9[1];\r\n\r\n  if (arePointsCollinear(triangle)) return null; // points are collinear\r\n\r\n  var m = new Matrix4(); // prettier-ignore\r\n\r\n  m.set(1, 1, 1, 1, ax * ax + ay * ay, ax, ay, 1, bx * bx + by * by, bx, by, 1, cx * cx + cy * cy, cx, cy, 1);\r\n  var m11 = getMinor(m, 1, 1);\r\n  var m13 = getMinor(m, 1, 3);\r\n  var m12 = getMinor(m, 1, 2);\r\n  var m14 = getMinor(m, 1, 4);\r\n  var x0 = 0.5 * (m12 / m11);\r\n  var y0 = 0.5 * (m13 / m11);\r\n  var r2 = x0 * x0 + y0 * y0 + m14 / m11;\r\n  return {\r\n    x: Math.abs(x0) === 0 ? 0 : x0,\r\n    y: Math.abs(y0) === 0 ? 0 : -y0,\r\n    r: Math.sqrt(r2)\r\n  };\r\n} // https://stackoverflow.com/questions/39984709/how-can-i-check-wether-a-point-is-inside-the-circumcircle-of-3-points\r\n\r\nfunction isPointInCircumcircle(point, triangle) {\r\n  var _ref = Array.isArray(triangle[0]) ? triangle[0] : triangle[0].toArray(),\r\n      _ref2 = _slicedToArray(_ref, 2),\r\n      ax = _ref2[0],\r\n      ay = _ref2[1];\r\n\r\n  var _ref3 = Array.isArray(triangle[1]) ? triangle[1] : triangle[1].toArray(),\r\n      _ref4 = _slicedToArray(_ref3, 2),\r\n      bx = _ref4[0],\r\n      by = _ref4[1];\r\n\r\n  var _ref5 = Array.isArray(triangle[2]) ? triangle[2] : triangle[2].toArray(),\r\n      _ref6 = _slicedToArray(_ref5, 2),\r\n      cx = _ref6[0],\r\n      cy = _ref6[1];\r\n\r\n  var _point2 = _slicedToArray(point, 2),\r\n      px = _point2[0],\r\n      py = _point2[1];\r\n\r\n  if (arePointsCollinear(triangle)) throw new Error(\"Collinear points don't form a triangle\");\r\n  /**\r\n          | ax-px, ay-py, (ax-px)² + (ay-py)² |\r\n    det = | bx-px, by-py, (bx-px)² + (by-py)² |\r\n          | cx-px, cy-py, (cx-px)² + (cy-py)² |\r\n  */\r\n\r\n  var x1mpx = ax - px;\r\n  var aympy = ay - py;\r\n  var bxmpx = bx - px;\r\n  var bympy = by - py;\r\n  var cxmpx = cx - px;\r\n  var cympy = cy - py; // prettier-ignore\r\n\r\n  var d = determinant3(x1mpx, aympy, x1mpx * x1mpx + aympy * aympy, bxmpx, bympy, bxmpx * bxmpx + bympy * bympy, cxmpx, cympy, cxmpx * cxmpx + cympy * cympy); // if d is 0, the point is on C\r\n\r\n  if (d === 0) {\r\n    return true;\r\n  }\r\n\r\n  return !isTriangleClockwise(triangle) ? d > 0 : d < 0;\r\n} // From https://algorithmtutor.com/Computational-Geometry/Determining-if-two-consecutive-segments-turn-left-or-right/\r\n\r\nvar mv1 = new Vector2();\r\nvar mv2 = new Vector2();\r\n/**\r\n \r\n     ╱      ╲     \r\n    ╱        ╲    \r\n   ▕          ▏   \r\n                  \r\n right      left  \r\n\r\n * NOTE: Should this use a buffer instead? [x0, y0, x1, y1]?\r\n */\r\n\r\nfunction doThreePointsMakeARight(points) {\r\n  var _points$map = points.map(function (p) {\r\n    if (Array.isArray(p)) {\r\n      return _construct(Vector2, _toConsumableArray(p));\r\n    }\r\n\r\n    return p;\r\n  }),\r\n      _points$map2 = _slicedToArray(_points$map, 3),\r\n      p1 = _points$map2[0],\r\n      p2 = _points$map2[1],\r\n      p3 = _points$map2[2];\r\n\r\n  if (arePointsCollinear(points)) return false; // @ts-ignore\r\n\r\n  var p2p1 = mv1.subVectors(p2, p1); // @ts-ignore\r\n\r\n  var p3p1 = mv2.subVectors(p3, p1);\r\n  var cross = p3p1.cross(p2p1);\r\n  return cross > 0;\r\n}\r\n\r\nvar triangle = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  isPointInTriangle: isPointInTriangle,\r\n  triangleDeterminant: triangleDeterminant,\r\n  arePointsCollinear: arePointsCollinear,\r\n  isTriangleClockwise: isTriangleClockwise,\r\n  getCircumcircle: getCircumcircle,\r\n  isPointInCircumcircle: isPointInCircumcircle,\r\n  doThreePointsMakeARight: doThreePointsMakeARight\r\n});\r\n\r\nexport { _slicedToArray as _, _toConsumableArray as a, triangleDeterminant as b, arePointsCollinear as c, doThreePointsMakeARight as d, isTriangleClockwise as e, isPointInCircumcircle as f, getCircumcircle as g, isPointInTriangle as i, triangle as t };\r\n", "import { d as doThreePointsMakeARight, a as _toConsumableArray, _ as _slicedToArray } from './triangle-b62b9067.esm.js';\r\nimport { Vector3, Matrix3 } from 'three';\r\nimport { a as matrixSum3 } from './matrix-baa530bf.esm.js';\r\n\r\n/**\r\n * Clamps a value between a range.\r\n */\r\nfunction clamp(value, min, max) {\r\n  return Math.max(min, Math.min(max, value));\r\n} // Loops the value t, so that it is never larger than length and never smaller than 0.\r\n\r\nfunction repeat(t, length) {\r\n  return clamp(t - Math.floor(t / length) * length, 0, length);\r\n} // Calculates the shortest difference between two given angles.\r\n\r\n\r\nfunction deltaAngle(current, target) {\r\n  var delta = repeat(target - current, Math.PI * 2);\r\n  if (delta > Math.PI) delta -= Math.PI * 2;\r\n  return delta;\r\n}\r\n/**\r\n * Converts degrees to radians.\r\n */\r\n\r\nfunction degToRad(degrees) {\r\n  return degrees / 180 * Math.PI;\r\n}\r\n/**\r\n * Converts radians to degrees.\r\n */\r\n\r\nfunction radToDeg(radians) {\r\n  return radians * 180 / Math.PI;\r\n} // adapted from https://gist.github.com/stephanbogner/a5f50548a06bec723dcb0991dcbb0856 by https://twitter.com/st_phan\r\n\r\nfunction fibonacciOnSphere(buffer, _ref) {\r\n  var _ref$radius = _ref.radius,\r\n      radius = _ref$radius === void 0 ? 1 : _ref$radius;\r\n  var samples = buffer.length / 3;\r\n  var offset = 2 / samples;\r\n  var increment = Math.PI * (3 - 2.2360679775);\r\n\r\n  for (var i = 0; i < buffer.length; i += 3) {\r\n    var y = i * offset - 1 + offset / 2;\r\n    var distance = Math.sqrt(1 - Math.pow(y, 2));\r\n    var phi = i % samples * increment;\r\n    var x = Math.cos(phi) * distance;\r\n    var z = Math.sin(phi) * distance;\r\n    buffer[i] = x * radius;\r\n    buffer[i + 1] = y * radius;\r\n    buffer[i + 2] = z * radius;\r\n  }\r\n} // @ts-ignore\r\n\r\nfunction vectorEquals(a, b) {\r\n  var eps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.EPSILON;\r\n  return Math.abs(a.x - b.x) < eps && Math.abs(a.y - b.y) < eps && Math.abs(a.z - b.z) < eps;\r\n}\r\n/**\r\n * Sorts vectors in lexicographic order, works with both v2 and v3\r\n *\r\n *  Use as:\r\n *  const sorted = arrayOfVectors.sort(lexicographicOrder)\r\n */\r\n// https://en.wikipedia.org/wiki/Lexicographic_order\r\n\r\nfunction lexicographic(a, b) {\r\n  if (a.x === b.x) {\r\n    // do a check to see if points is 3D,\r\n    // in which case add y eq check and sort by z\r\n    if (typeof a.z !== \"undefined\") {\r\n      if (a.y === b.y) {\r\n        return a.z - b.z;\r\n      }\r\n    }\r\n\r\n    return a.y - b.y;\r\n  }\r\n\r\n  return a.x - b.x;\r\n}\r\n/**\r\n * Convex Hull\r\n *\r\n * Returns an array of 2D Vectors representing the convex hull of a set of 2D Vectors\r\n */\r\n\r\n/**\r\n * Calculate the convex hull of a set of points\r\n */\r\n\r\nfunction convexHull(_points) {\r\n  var points = _points.sort(lexicographic); // put p1 and p2 in a list lUpper with p1 as the first point\r\n\r\n\r\n  var lUpper = [points[0], points[1]]; // for i <- 3 to n\r\n\r\n  for (var i = 2; i < points.length; i++) {\r\n    lUpper.push(points[i]); // while lUpper contains more than 2 points and the last three points in lUpper do not make a right turn\r\n\r\n    while (lUpper.length > 2 && doThreePointsMakeARight(_toConsumableArray(lUpper.slice(-3)))) {\r\n      // delete the middle of the last three points from lUpper\r\n      lUpper.splice(lUpper.length - 2, 1);\r\n    }\r\n  } // put pn and pn-1 in a list lLower with pn as the first point\r\n\r\n\r\n  var lLower = [points[points.length - 1], points[points.length - 2]]; // for (i <- n - 2 downto 1)\r\n\r\n  for (var _i = points.length - 3; _i >= 0; _i--) {\r\n    // append pi to lLower\r\n    lLower.push(points[_i]); // while lLower contains more than 2 points and the last three points in lLower do not make a right turn\r\n\r\n    while (lLower.length > 2 && doThreePointsMakeARight(_toConsumableArray(lLower.slice(-3)))) {\r\n      // delete the middle of the last three points from lLower\r\n      lLower.splice(lLower.length - 2, 1);\r\n    }\r\n  } // remove the first and last point from lLower to avoid duplication of the points where the upper and lower hull meet\r\n\r\n\r\n  lLower.splice(0, 1);\r\n  lLower.splice(lLower.length - 1, 1); // prettier-ignore\r\n\r\n  var c = [].concat(lUpper, lLower);\r\n  return c;\r\n}\r\nfunction remap(x, _ref2, _ref3) {\r\n  var _ref4 = _slicedToArray(_ref2, 2),\r\n      low1 = _ref4[0],\r\n      high1 = _ref4[1];\r\n\r\n  var _ref5 = _slicedToArray(_ref3, 2),\r\n      low2 = _ref5[0],\r\n      high2 = _ref5[1];\r\n\r\n  return low2 + (x - low1) * (high2 - low2) / (high1 - low1);\r\n}\r\n/**\r\n *\r\n * https://www.desmos.com/calculator/vsnmlaljdu\r\n *\r\n * Ease-in-out, goes to -Infinite before 0 and Infinite after 1\r\n *\r\n * @param t\r\n * @returns\r\n */\r\n\r\nfunction fade(t) {\r\n  return t * t * t * (t * (t * 6 - 15) + 10);\r\n}\r\n/**\r\n *\r\n * Returns the result of linearly interpolating between input A and input B by input T.\r\n *\r\n * @param v0\r\n * @param v1\r\n * @param t\r\n * @returns\r\n */\r\n\r\nfunction lerp(v0, v1, t) {\r\n  return v0 * (1 - t) + v1 * t;\r\n}\r\n/**\r\n *\r\n * Returns the linear parameter that produces the interpolant specified by input T within the range of input A to input B.\r\n *\r\n * @param v0\r\n * @param v1\r\n * @param t\r\n * @returns\r\n */\r\n\r\nfunction inverseLerp(v0, v1, t) {\r\n  return (t - v0) / (v1 - v0);\r\n}\r\n/**\r\n *\r\n */\r\n\r\nfunction normalize(x, y, z) {\r\n  var m = Math.sqrt(x * x + y * y + z * z);\r\n  return [x / m, y / m, z / m];\r\n}\r\n/**\r\n *\r\n */\r\n\r\nfunction pointOnCubeToPointOnSphere(x, y, z) {\r\n  var x2 = x * x;\r\n  var y2 = y * y;\r\n  var z2 = z * z;\r\n  var nx = x * Math.sqrt(1 - (y2 + z2) / 2 + y2 * z2 / 3);\r\n  var ny = y * Math.sqrt(1 - (z2 + x2) / 2 + z2 * x2 / 3);\r\n  var nz = z * Math.sqrt(1 - (x2 + y2) / 2 + x2 * y2 / 3);\r\n  return [nx, ny, nz];\r\n} // https://math.stackexchange.com/questions/180418/calculate-rotation-matrix-to-align-vector-a-to-vector-b-in-3d\r\n\r\n/**\r\n * Give two unit vectors a and b, returns the transformation matrix that rotates a onto b.\r\n *\r\n * */\r\n\r\nfunction rotateVectorOnVector(a, b) {\r\n  var v = new Vector3().crossVectors(a, b);\r\n  var c = a.dot(b);\r\n  var i = new Matrix3().identity(); //  skew-symmetric cross-product matrix of 𝑣 https://en.wikipedia.org/wiki/Skew-symmetric_matrix\r\n  // prettier-ignore\r\n\r\n  var vx = new Matrix3().set(0, -v.z, v.y, v.z, 0, -v.x, -v.y, v.x, 0);\r\n  var vxsquared = new Matrix3().multiplyMatrices(vx, vx).multiplyScalar(1 / (1 + c));\r\n\r\n  var _final = matrixSum3(matrixSum3(i, vx), vxsquared);\r\n\r\n  return _final;\r\n} // calculate latitude and longitude (in radians) from point on unit sphere\r\n\r\nfunction pointToCoordinate(x, y, z) {\r\n  var lat = Math.asin(y);\r\n  var lon = Math.atan2(x, -z);\r\n  return [lat, lon];\r\n} // calculate point on unit sphere given latitude and logitude in radians\r\n\r\nfunction coordinateToPoint(lat, lon) {\r\n  var y = Math.sin(lat);\r\n  var r = Math.cos(lat);\r\n  var x = Math.sin(lon) * r;\r\n  var z = -Math.cos(lon) * r;\r\n  return [x, y, z];\r\n}\r\n/**\r\n * Given a plane and a segment, return the intersection point if it exists or null it doesn't.\r\n */\r\n\r\nfunction planeSegmentIntersection(plane, segment) {\r\n  var _segment = _slicedToArray(segment, 2),\r\n      a = _segment[0],\r\n      b = _segment[1];\r\n\r\n  var matrix = rotateVectorOnVector(plane.normal, new Vector3(0, 1, 0));\r\n  var t = inverseLerp(a.clone().applyMatrix3(matrix).y, b.clone().applyMatrix3(matrix).y, 0);\r\n  return new Vector3().lerpVectors(a, b, t);\r\n}\r\n/**\r\n * Given a plane and a point, return the distance.\r\n */\r\n\r\nfunction pointToPlaneDistance(p, plane) {\r\n  var d = plane.normal.dot(p); // TODO\r\n\r\n  return d;\r\n}\r\nfunction getIndexFrom3D(coords, sides) {\r\n  var _coords = _slicedToArray(coords, 3),\r\n      ix = _coords[0],\r\n      iy = _coords[1],\r\n      iz = _coords[2];\r\n\r\n  var _sides = _slicedToArray(sides, 2),\r\n      rx = _sides[0],\r\n      ry = _sides[1];\r\n\r\n  return iz * rx * ry + iy * rx + ix;\r\n}\r\nfunction get3DFromIndex(index, size) {\r\n  var _size = _slicedToArray(size, 2),\r\n      rx = _size[0],\r\n      ry = _size[1];\r\n\r\n  var a = rx * ry;\r\n  var z = index / a;\r\n  var b = index - a * z;\r\n  var y = b / rx;\r\n  var x = b % rx;\r\n  return [x, y, z];\r\n}\r\nfunction getIndexFrom2D(coords, size) {\r\n  return coords[0] + size[0] * coords[1];\r\n}\r\nfunction get2DFromIndex(index, columns) {\r\n  var x = index % columns;\r\n  var y = Math.floor(index / columns);\r\n  return [x, y];\r\n}\r\n\r\nvar misc = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  clamp: clamp,\r\n  deltaAngle: deltaAngle,\r\n  degToRad: degToRad,\r\n  radToDeg: radToDeg,\r\n  fibonacciOnSphere: fibonacciOnSphere,\r\n  vectorEquals: vectorEquals,\r\n  lexicographic: lexicographic,\r\n  convexHull: convexHull,\r\n  remap: remap,\r\n  fade: fade,\r\n  lerp: lerp,\r\n  inverseLerp: inverseLerp,\r\n  normalize: normalize,\r\n  pointOnCubeToPointOnSphere: pointOnCubeToPointOnSphere,\r\n  rotateVectorOnVector: rotateVectorOnVector,\r\n  pointToCoordinate: pointToCoordinate,\r\n  coordinateToPoint: coordinateToPoint,\r\n  planeSegmentIntersection: planeSegmentIntersection,\r\n  pointToPlaneDistance: pointToPlaneDistance,\r\n  getIndexFrom3D: getIndexFrom3D,\r\n  get3DFromIndex: get3DFromIndex,\r\n  getIndexFrom2D: getIndexFrom2D,\r\n  get2DFromIndex: get2DFromIndex\r\n});\r\n\r\nexport { degToRad as a, fibonacciOnSphere as b, clamp as c, deltaAngle as d, lexicographic as e, fade as f, convexHull as g, remap as h, inverseLerp as i, rotateVectorOnVector as j, pointToCoordinate as k, lerp as l, misc as m, normalize as n, coordinateToPoint as o, pointOnCubeToPointOnSphere as p, planeSegmentIntersection as q, radToDeg as r, pointToPlaneDistance as s, getIndexFrom3D as t, get3DFromIndex as u, vectorEquals as v, getIndexFrom2D as w, get2DFromIndex as x };\r\n", "import { a as _toConsumableArray } from './triangle-b62b9067.esm.js';\r\nimport { Color, Vector3, Quaternion, Vector2, Vector4, Euler, Spherical, Matrix4 } from 'three';\r\nimport { d as deltaAngle } from './misc-7d870b3c.esm.js';\r\n\r\n/**\r\n * Rounded square wave easing\r\n */\r\n\r\nvar rsqw = function rsqw(t) {\r\n  var delta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.01;\r\n  var a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\r\n  var f = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1 / (2 * Math.PI);\r\n  return a / Math.atan(1 / delta) * Math.atan(Math.sin(2 * Math.PI * t * f) / delta);\r\n};\r\n/**\r\n * Exponential easing\r\n */\r\n\r\nvar exp = function exp(t) {\r\n  return 1 / (1 + t + 0.48 * t * t + 0.235 * t * t * t);\r\n};\r\n/**\r\n * Damp, based on Game Programming Gems 4 Chapter 1.10\r\n *   Return value indicates whether the animation is still running.\r\n */\r\n\r\nfunction damp(\r\n/** The object */\r\ncurrent,\r\n/** The key to animate */\r\nprop,\r\n/** To goal value */\r\ntarget) {\r\n  var smoothTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.25;\r\n  var delta = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.01;\r\n  var maxSpeed = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Infinity;\r\n  var easing = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : exp;\r\n  var eps = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0.001;\r\n  var vel = \"velocity_\" + prop;\r\n  if (current.__damp === undefined) current.__damp = {};\r\n  if (current.__damp[vel] === undefined) current.__damp[vel] = 0;\r\n\r\n  if (Math.abs(current[prop] - target) <= eps) {\r\n    current[prop] = target;\r\n    return false;\r\n  }\r\n\r\n  smoothTime = Math.max(0.0001, smoothTime);\r\n  var omega = 2 / smoothTime;\r\n  var t = easing(omega * delta);\r\n  var change = current[prop] - target;\r\n  var originalTo = target; // Clamp maximum maxSpeed\r\n\r\n  var maxChange = maxSpeed * smoothTime;\r\n  change = Math.min(Math.max(change, -maxChange), maxChange);\r\n  target = current[prop] - change;\r\n  var temp = (current.__damp[vel] + omega * change) * delta;\r\n  current.__damp[vel] = (current.__damp[vel] - omega * temp) * t;\r\n  var output = target + (change + temp) * t; // Prevent overshooting\r\n\r\n  if (originalTo - current[prop] > 0.0 === output > originalTo) {\r\n    output = originalTo;\r\n    current.__damp[vel] = (output - originalTo) / delta;\r\n  }\r\n\r\n  current[prop] = output;\r\n  return true;\r\n}\r\n/**\r\n * DampAngle, based on Game Programming Gems 4 Chapter 1.10\r\n */\r\n\r\nfunction dampAngle(current, prop, target, smoothTime, delta, maxSpeed, easing, eps) {\r\n  return damp(current, prop, current[prop] + deltaAngle(current[prop], target), smoothTime, delta, maxSpeed, easing, eps);\r\n}\r\n/**\r\n * Vector2D Damp\r\n */\r\n\r\nvar v2d = /*@__PURE__*/new Vector2();\r\nvar a2, b2;\r\nfunction damp2(current, target, smoothTime, delta, maxSpeed, easing, eps) {\r\n  if (typeof target === \"number\") v2d.setScalar(target);else if (Array.isArray(target)) v2d.set(target[0], target[1]);else v2d.copy(target);\r\n  a2 = damp(current, \"x\", v2d.x, smoothTime, delta, maxSpeed, easing, eps);\r\n  b2 = damp(current, \"y\", v2d.y, smoothTime, delta, maxSpeed, easing, eps);\r\n  return a2 || b2;\r\n}\r\n/**\r\n * Vector3D Damp\r\n */\r\n\r\nvar v3d = /*@__PURE__*/new Vector3();\r\nvar a3, b3, c3;\r\nfunction damp3(current, target, smoothTime, delta, maxSpeed, easing, eps) {\r\n  if (typeof target === \"number\") v3d.setScalar(target);else if (Array.isArray(target)) v3d.set(target[0], target[1], target[2]);else v3d.copy(target);\r\n  a3 = damp(current, \"x\", v3d.x, smoothTime, delta, maxSpeed, easing, eps);\r\n  b3 = damp(current, \"y\", v3d.y, smoothTime, delta, maxSpeed, easing, eps);\r\n  c3 = damp(current, \"z\", v3d.z, smoothTime, delta, maxSpeed, easing, eps);\r\n  return a3 || b3 || c3;\r\n}\r\n/**\r\n * Vector4D Damp\r\n */\r\n\r\nvar v4d = /*@__PURE__*/new Vector4();\r\nvar a4, b4, c4, d4;\r\nfunction damp4(current, target, smoothTime, delta, maxSpeed, easing, eps) {\r\n  if (typeof target === \"number\") v4d.setScalar(target);else if (Array.isArray(target)) v4d.set(target[0], target[1], target[2], target[3]);else v4d.copy(target);\r\n  a4 = damp(current, \"x\", v4d.x, smoothTime, delta, maxSpeed, easing, eps);\r\n  b4 = damp(current, \"y\", v4d.y, smoothTime, delta, maxSpeed, easing, eps);\r\n  c4 = damp(current, \"z\", v4d.z, smoothTime, delta, maxSpeed, easing, eps);\r\n  d4 = damp(current, \"w\", v4d.w, smoothTime, delta, maxSpeed, easing, eps);\r\n  return a4 || b4 || c4 || d4;\r\n}\r\n/**\r\n * Euler Damp\r\n */\r\n\r\nvar rot = /*@__PURE__*/new Euler();\r\nvar aE, bE, cE;\r\nfunction dampE(current, target, smoothTime, delta, maxSpeed, easing, eps) {\r\n  if (Array.isArray(target)) rot.set(target[0], target[1], target[2], target[3]);else rot.copy(target);\r\n  aE = dampAngle(current, \"x\", rot.x, smoothTime, delta, maxSpeed, easing, eps);\r\n  bE = dampAngle(current, \"y\", rot.y, smoothTime, delta, maxSpeed, easing, eps);\r\n  cE = dampAngle(current, \"z\", rot.z, smoothTime, delta, maxSpeed, easing, eps);\r\n  return aE || bE || cE;\r\n}\r\n/**\r\n * Color Damp\r\n */\r\n\r\nvar col = /*@__PURE__*/new Color();\r\nvar aC, bC, cC;\r\nfunction dampC(current, target, smoothTime, delta, maxSpeed, easing, eps) {\r\n  if (target instanceof Color) col.copy(target);else if (Array.isArray(target)) col.setRGB(target[0], target[1], target[2]);else col.set(target);\r\n  aC = damp(current, \"r\", col.r, smoothTime, delta, maxSpeed, easing, eps);\r\n  bC = damp(current, \"g\", col.g, smoothTime, delta, maxSpeed, easing, eps);\r\n  cC = damp(current, \"b\", col.b, smoothTime, delta, maxSpeed, easing, eps);\r\n  return aC || bC || cC;\r\n}\r\n/**\r\n * Quaternion Damp\r\n * https://gist.github.com/maxattack/4c7b4de00f5c1b95a33b\r\n * Copyright 2016 Max Kaufmann (max.kaufmann@gmail.com)\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nvar qt = /*@__PURE__*/new Quaternion();\r\nvar v4result = /*@__PURE__*/new Vector4();\r\nvar v4velocity = /*@__PURE__*/new Vector4();\r\nvar v4error = /*@__PURE__*/new Vector4();\r\nvar aQ, bQ, cQ, dQ;\r\nfunction dampQ(current, target, smoothTime, delta, maxSpeed, easing, eps) {\r\n  var cur = current;\r\n  if (Array.isArray(target)) qt.set(target[0], target[1], target[2], target[3]);else qt.copy(target);\r\n  var multi = current.dot(qt) > 0 ? 1 : -1;\r\n  qt.x *= multi;\r\n  qt.y *= multi;\r\n  qt.z *= multi;\r\n  qt.w *= multi;\r\n  aQ = damp(current, \"x\", qt.x, smoothTime, delta, maxSpeed, easing, eps);\r\n  bQ = damp(current, \"y\", qt.y, smoothTime, delta, maxSpeed, easing, eps);\r\n  cQ = damp(current, \"z\", qt.z, smoothTime, delta, maxSpeed, easing, eps);\r\n  dQ = damp(current, \"w\", qt.w, smoothTime, delta, maxSpeed, easing, eps); // smooth damp (nlerp approx)\r\n\r\n  v4result.set(current.x, current.y, current.z, current.w).normalize();\r\n  v4velocity.set(cur.__damp.velocity_x, cur.__damp.velocity_y, cur.__damp.velocity_z, cur.__damp.velocity_w); // ensure deriv is tangent\r\n\r\n  v4error.copy(v4result).multiplyScalar(v4velocity.dot(v4result) / v4result.dot(v4result));\r\n  cur.__damp.velocity_x -= v4error.x;\r\n  cur.__damp.velocity_y -= v4error.y;\r\n  cur.__damp.velocity_z -= v4error.z;\r\n  cur.__damp.velocity_w -= v4error.w;\r\n  current.set(v4result.x, v4result.y, v4result.z, v4result.w);\r\n  return aQ || bQ || cQ || dQ;\r\n}\r\n/**\r\n * Spherical Damp\r\n */\r\n\r\nvar spherical = /*@__PURE__*/new Spherical();\r\nvar aS, bS, cS;\r\nfunction dampS(current, target, smoothTime, delta, maxSpeed, easing, eps) {\r\n  if (Array.isArray(target)) spherical.set(target[0], target[1], target[2]);else spherical.copy(target);\r\n  aS = damp(current, \"radius\", spherical.radius, smoothTime, delta, maxSpeed, easing, eps);\r\n  bS = dampAngle(current, \"phi\", spherical.phi, smoothTime, delta, maxSpeed, easing, eps);\r\n  cS = dampAngle(current, \"theta\", spherical.theta, smoothTime, delta, maxSpeed, easing, eps);\r\n  return aS || bS || cS;\r\n}\r\n/**\r\n * Matrix4 Damp\r\n */\r\n\r\nvar mat = /*@__PURE__*/new Matrix4();\r\nvar mPos = /*@__PURE__*/new Vector3();\r\nvar mRot = /*@__PURE__*/new Quaternion();\r\nvar mSca = /*@__PURE__*/new Vector3();\r\nvar aM, bM, cM;\r\nfunction dampM(current, target, smoothTime, delta, maxSpeed, easing, eps) {\r\n  var cur = current;\r\n\r\n  if (cur.__damp === undefined) {\r\n    cur.__damp = {\r\n      position: new Vector3(),\r\n      rotation: new Quaternion(),\r\n      scale: new Vector3()\r\n    };\r\n    current.decompose(cur.__damp.position, cur.__damp.rotation, cur.__damp.scale);\r\n  }\r\n\r\n  if (Array.isArray(target)) mat.set.apply(mat, _toConsumableArray(target));else mat.copy(target);\r\n  mat.decompose(mPos, mRot, mSca);\r\n  aM = damp3(cur.__damp.position, mPos, smoothTime, delta, maxSpeed, easing, eps);\r\n  bM = dampQ(cur.__damp.rotation, mRot, smoothTime, delta, maxSpeed, easing, eps);\r\n  cM = damp3(cur.__damp.scale, mSca, smoothTime, delta, maxSpeed, easing, eps);\r\n  current.compose(cur.__damp.position, cur.__damp.rotation, cur.__damp.scale);\r\n  return aM || bM || cM;\r\n}\r\n\r\nvar easing = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  rsqw: rsqw,\r\n  exp: exp,\r\n  damp: damp,\r\n  dampAngle: dampAngle,\r\n  damp2: damp2,\r\n  damp3: damp3,\r\n  damp4: damp4,\r\n  dampE: dampE,\r\n  dampC: dampC,\r\n  dampQ: dampQ,\r\n  dampS: dampS,\r\n  dampM: dampM\r\n});\r\n\r\nexport { exp as a, dampAngle as b, damp2 as c, damp as d, easing as e, damp3 as f, damp4 as g, dampE as h, dampC as i, dampQ as j, dampS as k, dampM as l, rsqw as r };\r\n"],
  "mappings": "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",
  "names": ["_setPrototypeOf", "o", "p", "matrix", "col", "_construct", "Parent", "args", "Class", "triangle", "matrix", "matrix", "rsqw", "exp", "easing"]
}
